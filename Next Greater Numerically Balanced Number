from itertools import count

class Solution:
    def nextBeautifulNumber(self, n: int) -> int:
        # Start checking from n + 1 onwards
        for candidate in count(n + 1):
            # Count the frequency of each digit in the current number
            digit_count = [0] * 10  # Array to store count of digits 0-9
            temp_num = candidate
          
            # Extract each digit and count its occurrences
            while temp_num > 0:
                temp_num, digit = divmod(temp_num, 10)
                digit_count[digit] += 1
          
            # Check if the number is beautiful:
            # For each digit (0-9), either it doesn't appear (count is 0)
            # or it appears exactly as many times as its value
            is_beautiful = all(
                count == 0 or digit == count 
                for digit, count in enumerate(digit_count)
            )
          
            if is_beautiful:
                return candidate
