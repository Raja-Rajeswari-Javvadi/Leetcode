from typing import Optional

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        dummy_head = ListNode(0)  # Dummy node to simplify code
        current = dummy_head
        carry = 0  # To store carry-over during addition

        while l1 or l2 or carry:
            val1 = l1.val if l1 else 0  # Get value from l1, or 0 if l1 is None
            val2 = l2.val if l2 else 0  # Get value from l2, or 0 if l2 is None

            total = val1 + val2 + carry
            carry = total // 10  # Calculate new carry
            current.next = ListNode(total % 10)  # Create new node with digit
            current = current.next  # Move to the next node

            # Move to next nodes in l1 and l2 if available
            if l1:
                l1 = l1.next
            if l2:
                l2 = l2.next

        return dummy_head.next  # Return the head of the summed list
